ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(2,4,5,6,7))
ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
# install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
#                    "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata", "transformr", "gifski))
setwd("C:/Users/jerem/Documents/GitHub/covid-19")
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("gganimate")
#Function
map_world <- function(df_slice, world = world){
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]
levels(df_slice$Country.Region)[levels(df_slice$Country.Region) %in%
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]] <-
c("The Bahamas", "Myanmar", "Cape Verde", "Republic of Congo", "Democratic Republic of the Congo", "Ivory Coast","Czech Republic",
"Diamond Princess", "Swaziland","Guinea Bissau", "Vatican", "South Korea", "Federated States of Micronesia",
"MS Zaandam", "Macedonia", "Republic of Serbia", "Taiwan", "United Republic of Tanzania", "East Timor",
"United States of America", "West Bank and Gaza")#correcting names to match  world dataset
#Remove ships: MS Zaandam and Diamond Princess, and unmatched regions: West Bank and Gaza
df_slice <- df_slice[!df_slice$Country.Region %in% c("MS Zaandam", "Diamond Princess", "West Bank and Gaza"),]
#Adding NA rows for missing countries in world dataset
missingcountry <- world$sovereignt[!world$sovereignt %in% df_slice$Country.Region]
missingrows <- data.frame(t(sapply(missingcountry, FUN = function(i){return(c(df_slice$Date[1], i,NA,NA,NA,NA,NA))})))
colnames(missingrows) <- colnames(df_slice); missingrows[,c(3,4,5,6,7)] <- NA
df_slice <- rbind(df_slice,missingrows)
Confirmed <- tapply(X = df_slice$Confirmed, INDEX = df_slice$Country.Region, FUN = sum)
Deaths <- tapply(X = df_slice$Deaths, INDEX = df_slice$Country.Region, FUN = sum)
Recovered <- tapply(X = df_slice$Recovered, INDEX = df_slice$Country.Region, FUN = sum)
Active <- tapply(X = df_slice$Active, INDEX = df_slice$Country.Region, FUN = sum)
df_slice <- data.frame(Confirmed, Deaths, Recovered, Active, "country" =names(Confirmed), "Date" = as.integer(df_slice$Date[1]))
df_map <- merge(df_slice, world, by.x="country", by.y="sovereignt")
# ggplot(data = df_map) +
#   geom_sf(aes(fill = Confirmed, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", trans = "sqrt")
#   #coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
return(df_map)
}
####
world <- ne_countries(scale = "medium", returnclass = "sf")
df_time_world <- read.csv("data/time-series-19-covid-combined.csv")
df_time_world$Active = with(df_time_world, Confirmed - Recovered - Deaths)
df_time_world$Date <- as.integer(factor(df_time_world$Date))
df_time_world$Country.Region <- as.factor (df_time_world$Country.Region )
df_time_world$Province.State <- as.factor(df_time_world$Province.State )
str(df_time_world)
min_day  <- min(unique(df_time_world$Date)); max_day <- max(unique(df_time_world$Date))
date_selected <- round(seq(min_day,max_day, length=60))
df_slice_1 <- df_time_world[df_time_world$Date == date_selected[1],]
out_1 <- map_world(df_slice = df_slice_1, world=world)
for(t in date_selected[-1]){
df_slice_t <- df_time_world[df_time_world$Date == t,]
out_t <- map_world(df_slice = df_slice_t, world=world)
out_1 <- rbind(out_1, out_t)
}
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
vmin
vmax
#
# p <- ggplot(data = out_1) +
#   geom_sf(aes(fill = Deaths, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", begin = 0, end = 1, limits = c(vmin,vmax), na.value="blue",
#                        trans = scales::pseudo_log_trans(sigma = 0.001, base = 10), breaks = c(0, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000,100000))
p <- ggplot(data = out_1) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
o <- p + transition_time(Date) +
labs(title = "Day: {frame_time}")
date_selected <- round(seq(min_day,max_day, length=100))
# install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
#                    "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata", "transformr", "gifski))
setwd("C:/Users/jerem/Documents/GitHub/covid-19")
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("gganimate")
#Function
map_world <- function(df_slice, world = world){
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]
levels(df_slice$Country.Region)[levels(df_slice$Country.Region) %in%
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]] <-
c("The Bahamas", "Myanmar", "Cape Verde", "Republic of Congo", "Democratic Republic of the Congo", "Ivory Coast","Czech Republic",
"Diamond Princess", "Swaziland","Guinea Bissau", "Vatican", "South Korea", "Federated States of Micronesia",
"MS Zaandam", "Macedonia", "Republic of Serbia", "Taiwan", "United Republic of Tanzania", "East Timor",
"United States of America", "West Bank and Gaza")#correcting names to match  world dataset
#Remove ships: MS Zaandam and Diamond Princess, and unmatched regions: West Bank and Gaza
df_slice <- df_slice[!df_slice$Country.Region %in% c("MS Zaandam", "Diamond Princess", "West Bank and Gaza"),]
#Adding NA rows for missing countries in world dataset
missingcountry <- world$sovereignt[!world$sovereignt %in% df_slice$Country.Region]
missingrows <- data.frame(t(sapply(missingcountry, FUN = function(i){return(c(df_slice$Date[1], i,NA,NA,NA,NA,NA))})))
colnames(missingrows) <- colnames(df_slice); missingrows[,c(3,4,5,6,7)] <- NA
df_slice <- rbind(df_slice,missingrows)
Confirmed <- tapply(X = df_slice$Confirmed, INDEX = df_slice$Country.Region, FUN = sum)
Deaths <- tapply(X = df_slice$Deaths, INDEX = df_slice$Country.Region, FUN = sum)
Recovered <- tapply(X = df_slice$Recovered, INDEX = df_slice$Country.Region, FUN = sum)
Active <- tapply(X = df_slice$Active, INDEX = df_slice$Country.Region, FUN = sum)
df_slice <- data.frame(Confirmed, Deaths, Recovered, Active, "country" =names(Confirmed), "Date" = as.integer(df_slice$Date[1]))
df_map <- merge(df_slice, world, by.x="country", by.y="sovereignt")
# ggplot(data = df_map) +
#   geom_sf(aes(fill = Confirmed, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", trans = "sqrt")
#   #coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
return(df_map)
}
####
world <- ne_countries(scale = "medium", returnclass = "sf")
df_time_world <- read.csv("data/time-series-19-covid-combined.csv")
df_time_world$Active = with(df_time_world, Confirmed - Recovered - Deaths)
df_time_world$Date <- as.integer(factor(df_time_world$Date))
df_time_world$Country.Region <- as.factor (df_time_world$Country.Region )
df_time_world$Province.State <- as.factor(df_time_world$Province.State )
str(df_time_world)
min_day  <- min(unique(df_time_world$Date)); max_day <- max(unique(df_time_world$Date))
date_selected <- round(seq(min_day,max_day, length=100))
df_slice_1 <- df_time_world[df_time_world$Date == date_selected[1],]
out_1 <- map_world(df_slice = df_slice_1, world=world)
for(t in date_selected[-1]){
df_slice_t <- df_time_world[df_time_world$Date == t,]
out_t <- map_world(df_slice = df_slice_t, world=world)
out_1 <- rbind(out_1, out_t)
}
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
#
# p <- ggplot(data = out_1) +
#   geom_sf(aes(fill = Deaths, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", begin = 0, end = 1, limits = c(vmin,vmax), na.value="blue",
#                        trans = scales::pseudo_log_trans(sigma = 0.001, base = 10), breaks = c(0, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000,100000))
p <- ggplot(data = out_1) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
o_anim <- animate(o, height = 1000, width =1400)
o <- p + transition_time(Date) +
labs(title = "Day: {frame_time}")
o_anim <- animate(o, height = 1000, width =1400)
anim_save("Covid_Active.gif", o_anim)
?animate
# install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
#                    "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata", "transformr", "gifski))
setwd("C:/Users/jerem/Documents/GitHub/covid-19")
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("gganimate")
#Function
map_world <- function(df_slice, world = world){
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]
levels(df_slice$Country.Region)[levels(df_slice$Country.Region) %in%
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]] <-
c("The Bahamas", "Myanmar", "Cape Verde", "Republic of Congo", "Democratic Republic of the Congo", "Ivory Coast","Czech Republic",
"Diamond Princess", "Swaziland","Guinea Bissau", "Vatican", "South Korea", "Federated States of Micronesia",
"MS Zaandam", "Macedonia", "Republic of Serbia", "Taiwan", "United Republic of Tanzania", "East Timor",
"United States of America", "West Bank and Gaza")#correcting names to match  world dataset
#Remove ships: MS Zaandam and Diamond Princess, and unmatched regions: West Bank and Gaza
df_slice <- df_slice[!df_slice$Country.Region %in% c("MS Zaandam", "Diamond Princess", "West Bank and Gaza"),]
#Adding NA rows for missing countries in world dataset
missingcountry <- world$sovereignt[!world$sovereignt %in% df_slice$Country.Region]
missingrows <- data.frame(t(sapply(missingcountry, FUN = function(i){return(c(df_slice$Date[1], i,NA,NA,NA,NA,NA))})))
colnames(missingrows) <- colnames(df_slice); missingrows[,c(3,4,5,6,7)] <- NA
df_slice <- rbind(df_slice,missingrows)
Confirmed <- tapply(X = df_slice$Confirmed, INDEX = df_slice$Country.Region, FUN = sum)
Deaths <- tapply(X = df_slice$Deaths, INDEX = df_slice$Country.Region, FUN = sum)
Recovered <- tapply(X = df_slice$Recovered, INDEX = df_slice$Country.Region, FUN = sum)
Active <- tapply(X = df_slice$Active, INDEX = df_slice$Country.Region, FUN = sum)
df_slice <- data.frame(Confirmed, Deaths, Recovered, Active, "country" =names(Confirmed), "Date" = as.integer(df_slice$Date[1]))
df_map <- merge(df_slice, world, by.x="country", by.y="sovereignt")
# ggplot(data = df_map) +
#   geom_sf(aes(fill = Confirmed, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", trans = "sqrt")
#   #coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
return(df_map)
}
####
world <- ne_countries(scale = "medium", returnclass = "sf")
df_time_world <- read.csv("data/time-series-19-covid-combined.csv")
df_time_world$Active = with(df_time_world, Confirmed - Recovered - Deaths)
df_time_world$Date <- as.integer(factor(df_time_world$Date))
df_time_world$Country.Region <- as.factor (df_time_world$Country.Region )
df_time_world$Province.State <- as.factor(df_time_world$Province.State )
str(df_time_world)
min_day  <- min(unique(df_time_world$Date)); max_day <- max(unique(df_time_world$Date))
date_selected <- round(seq(min_day,max_day, length=200))
df_slice_1 <- df_time_world[df_time_world$Date == date_selected[1],]
out_1 <- map_world(df_slice = df_slice_1, world=world)
for(t in date_selected[-1]){
df_slice_t <- df_time_world[df_time_world$Date == t,]
out_t <- map_world(df_slice = df_slice_t, world=world)
out_1 <- rbind(out_1, out_t)
}
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
#
# p <- ggplot(data = out_1) +
#   geom_sf(aes(fill = Deaths, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", begin = 0, end = 1, limits = c(vmin,vmax), na.value="blue",
#                        trans = scales::pseudo_log_trans(sigma = 0.001, base = 10), breaks = c(0, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000,100000))
p <- ggplot(data = out_1) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
o <- p + transition_time(Date) +
labs(title = "Day: {frame_time}")
####
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- st_transform(world, crs = 4326)
df_time_world <- read.csv("data/time-series-19-covid-combined.csv")
df_time_world$Active = with(df_time_world, Confirmed - Recovered - Deaths)
df_time_world$Date <- as.integer(factor(df_time_world$Date))
df_time_world$Country.Region <- as.factor (df_time_world$Country.Region )
df_time_world$Province.State <- as.factor(df_time_world$Province.State )
str(df_time_world)
min_day  <- min(unique(df_time_world$Date)); max_day <- max(unique(df_time_world$Date))
date_selected <- round(seq(min_day,max_day, length=200))
df_slice_1 <- df_time_world[df_time_world$Date == date_selected[1],]
out_1 <- map_world(df_slice = df_slice_1, world=world)
df_slice_N <- df_time_world[df_time_world$Date == date_selected[30],]
out_N <- map_world(df_slice = df_slice_N, world=world)
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
# install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
#                    "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata", "transformr", "gifski))
setwd("C:/Users/jerem/Documents/GitHub/covid-19")
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("gganimate")
#Function
map_world <- function(df_slice, world = world){
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]
levels(df_slice$Country.Region)[levels(df_slice$Country.Region) %in%
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]] <-
c("The Bahamas", "Myanmar", "Cape Verde", "Republic of Congo", "Democratic Republic of the Congo", "Ivory Coast","Czech Republic",
"Diamond Princess", "Swaziland","Guinea Bissau", "Vatican", "South Korea", "Federated States of Micronesia",
"MS Zaandam", "Macedonia", "Republic of Serbia", "Taiwan", "United Republic of Tanzania", "East Timor",
"United States of America", "West Bank and Gaza")#correcting names to match  world dataset
#Remove ships: MS Zaandam and Diamond Princess, and unmatched regions: West Bank and Gaza
df_slice <- df_slice[!df_slice$Country.Region %in% c("MS Zaandam", "Diamond Princess", "West Bank and Gaza"),]
#Adding NA rows for missing countries in world dataset
missingcountry <- world$sovereignt[!world$sovereignt %in% df_slice$Country.Region]
missingrows <- data.frame(t(sapply(missingcountry, FUN = function(i){return(c(df_slice$Date[1], i,NA,NA,NA,NA,NA))})))
colnames(missingrows) <- colnames(df_slice); missingrows[,c(3,4,5,6,7)] <- NA
df_slice <- rbind(df_slice,missingrows)
Confirmed <- tapply(X = df_slice$Confirmed, INDEX = df_slice$Country.Region, FUN = sum)
Deaths <- tapply(X = df_slice$Deaths, INDEX = df_slice$Country.Region, FUN = sum)
Recovered <- tapply(X = df_slice$Recovered, INDEX = df_slice$Country.Region, FUN = sum)
Active <- tapply(X = df_slice$Active, INDEX = df_slice$Country.Region, FUN = sum)
df_slice <- data.frame(Confirmed, Deaths, Recovered, Active, "country" =names(Confirmed), "Date" = as.integer(df_slice$Date[1]))
df_map <- merge(df_slice, world, by.x="country", by.y="sovereignt")
# ggplot(data = df_map) +
#   geom_sf(aes(fill = Confirmed, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", trans = "sqrt")
#   #coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
return(df_map)
}
####
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- st_transform(world, crs = 4326)
df_time_world <- read.csv("data/time-series-19-covid-combined.csv")
df_time_world$Active = with(df_time_world, Confirmed - Recovered - Deaths)
df_time_world$Date <- as.integer(factor(df_time_world$Date))
df_time_world$Country.Region <- as.factor (df_time_world$Country.Region )
df_time_world$Province.State <- as.factor(df_time_world$Province.State )
str(df_time_world)
min_day  <- min(unique(df_time_world$Date)); max_day <- max(unique(df_time_world$Date))
date_selected <- round(seq(min_day,max_day, length=200))
df_slice_1 <- df_time_world[df_time_world$Date == date_selected[1],]
out_1 <- map_world(df_slice = df_slice_1, world=world)
df_slice_N <- df_time_world[df_time_world$Date == date_selected[30],]
out_N <- map_world(df_slice = df_slice_N, world=world)
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
# install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
#                    "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata", "transformr", "gifski))
setwd("C:/Users/jerem/Documents/GitHub/covid-19")
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("gganimate")
#Function
map_world <- function(df_slice, world = world){
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]
levels(df_slice$Country.Region)[levels(df_slice$Country.Region) %in%
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]] <-
c("The Bahamas", "Myanmar", "Cape Verde", "Republic of Congo", "Democratic Republic of the Congo", "Ivory Coast","Czech Republic",
"Diamond Princess", "Swaziland","Guinea Bissau", "Vatican", "South Korea", "Federated States of Micronesia",
"MS Zaandam", "Macedonia", "Republic of Serbia", "Taiwan", "United Republic of Tanzania", "East Timor",
"United States of America", "West Bank and Gaza")#correcting names to match  world dataset
#Remove ships: MS Zaandam and Diamond Princess, and unmatched regions: West Bank and Gaza
df_slice <- df_slice[!df_slice$Country.Region %in% c("MS Zaandam", "Diamond Princess", "West Bank and Gaza"),]
#Adding NA rows for missing countries in world dataset
missingcountry <- world$sovereignt[!world$sovereignt %in% df_slice$Country.Region]
missingrows <- data.frame(t(sapply(missingcountry, FUN = function(i){return(c(df_slice$Date[1], i,NA,NA,NA,NA,NA))})))
colnames(missingrows) <- colnames(df_slice); missingrows[,c(3,4,5,6,7)] <- NA
df_slice <- rbind(df_slice,missingrows)
Confirmed <- tapply(X = df_slice$Confirmed, INDEX = df_slice$Country.Region, FUN = sum)
Deaths <- tapply(X = df_slice$Deaths, INDEX = df_slice$Country.Region, FUN = sum)
Recovered <- tapply(X = df_slice$Recovered, INDEX = df_slice$Country.Region, FUN = sum)
Active <- tapply(X = df_slice$Active, INDEX = df_slice$Country.Region, FUN = sum)
df_slice <- data.frame(Confirmed, Deaths, Recovered, Active, "country" =names(Confirmed), "Date" = as.integer(df_slice$Date[1]))
df_map <- merge(df_slice, world, by.x="country", by.y="sovereignt")
# ggplot(data = df_map) +
#   geom_sf(aes(fill = Confirmed, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", trans = "sqrt")
#   #coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
return(df_map)
}
####
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- st_transform(world, crs = 4326)
df_time_world <- read.csv("data/time-series-19-covid-combined.csv")
df_time_world$Active = with(df_time_world, Confirmed - Recovered - Deaths)
df_time_world$Date <- as.integer(factor(df_time_world$Date))
df_time_world$Country.Region <- as.factor (df_time_world$Country.Region )
df_time_world$Province.State <- as.factor(df_time_world$Province.State )
str(df_time_world)
min_day  <- min(unique(df_time_world$Date)); max_day <- max(unique(df_time_world$Date))
date_selected <- round(seq(min_day,max_day, length=200))
df_slice_1 <- df_time_world[df_time_world$Date == date_selected[1],]
out_1 <- map_world(df_slice = df_slice_1, world=world)
df_slice_N <- df_time_world[df_time_world$Date == date_selected[30],]
out_N <- map_world(df_slice = df_slice_N, world=world)
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
####
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- st_transform(world, crs = 3035)
# install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
#                    "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata", "transformr", "gifski))
setwd("C:/Users/jerem/Documents/GitHub/covid-19")
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("gganimate")
#Function
map_world <- function(df_slice, world = world){
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]
levels(df_slice$Country.Region)[levels(df_slice$Country.Region) %in%
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]] <-
c("The Bahamas", "Myanmar", "Cape Verde", "Republic of Congo", "Democratic Republic of the Congo", "Ivory Coast","Czech Republic",
"Diamond Princess", "Swaziland","Guinea Bissau", "Vatican", "South Korea", "Federated States of Micronesia",
"MS Zaandam", "Macedonia", "Republic of Serbia", "Taiwan", "United Republic of Tanzania", "East Timor",
"United States of America", "West Bank and Gaza")#correcting names to match  world dataset
#Remove ships: MS Zaandam and Diamond Princess, and unmatched regions: West Bank and Gaza
df_slice <- df_slice[!df_slice$Country.Region %in% c("MS Zaandam", "Diamond Princess", "West Bank and Gaza"),]
#Adding NA rows for missing countries in world dataset
missingcountry <- world$sovereignt[!world$sovereignt %in% df_slice$Country.Region]
missingrows <- data.frame(t(sapply(missingcountry, FUN = function(i){return(c(df_slice$Date[1], i,NA,NA,NA,NA,NA))})))
colnames(missingrows) <- colnames(df_slice); missingrows[,c(3,4,5,6,7)] <- NA
df_slice <- rbind(df_slice,missingrows)
Confirmed <- tapply(X = df_slice$Confirmed, INDEX = df_slice$Country.Region, FUN = sum)
Deaths <- tapply(X = df_slice$Deaths, INDEX = df_slice$Country.Region, FUN = sum)
Recovered <- tapply(X = df_slice$Recovered, INDEX = df_slice$Country.Region, FUN = sum)
Active <- tapply(X = df_slice$Active, INDEX = df_slice$Country.Region, FUN = sum)
df_slice <- data.frame(Confirmed, Deaths, Recovered, Active, "country" =names(Confirmed), "Date" = as.integer(df_slice$Date[1]))
df_map <- merge(df_slice, world, by.x="country", by.y="sovereignt")
# ggplot(data = df_map) +
#   geom_sf(aes(fill = Confirmed, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", trans = "sqrt")
#   #coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
return(df_map)
}
####
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- st_transform(world, crs = 3035)
df_time_world <- read.csv("data/time-series-19-covid-combined.csv")
df_time_world$Active = with(df_time_world, Confirmed - Recovered - Deaths)
df_time_world$Date <- as.integer(factor(df_time_world$Date))
df_time_world$Country.Region <- as.factor (df_time_world$Country.Region )
df_time_world$Province.State <- as.factor(df_time_world$Province.State )
str(df_time_world)
min_day  <- min(unique(df_time_world$Date)); max_day <- max(unique(df_time_world$Date))
date_selected <- round(seq(min_day,max_day, length=200))
df_slice_1 <- df_time_world[df_time_world$Date == date_selected[1],]
out_1 <- map_world(df_slice = df_slice_1, world=world)
df_slice_N <- df_time_world[df_time_world$Date == date_selected[30],]
out_N <- map_world(df_slice = df_slice_N, world=world)
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
df_slice_N <- df_time_world[df_time_world$Date == date_selected[100],]
out_N <- map_world(df_slice = df_slice_N, world=world)
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
length(df_slice_N)
length(date_selected)
df_slice_N <- df_time_world[df_time_world$Date == date_selected[200],]
out_N <- map_world(df_slice = df_slice_N, world=world)
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
df_slice_N <- df_time_world[df_time_world$Date == date_selected[length(date_selected)],]
out_N <- map_world(df_slice = df_slice_N, world=world)
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
vmin
df_slice_N <- df_time_world[df_time_world$Date == date_selected[length(date_selected)],]
out_N <- map_world(df_slice = df_slice_N, world=world)
vmin = min(out_N$Active, na.rm = TRUE); vmax = max(out_N$Active, na.rm = TRUE)
ggplot(data = out_N) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
# install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
#                    "ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata", "transformr", "gifski))
setwd("C:/Users/jerem/Documents/GitHub/covid-19")
library("ggplot2")
theme_set(theme_bw())
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rgeos")
library("gganimate")
#Function
map_world <- function(df_slice, world = world){
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]
levels(df_slice$Country.Region)[levels(df_slice$Country.Region) %in%
df_slice$Country.Region[!df_slice$Country.Region %in% world$sovereignt]] <-
c("The Bahamas", "Myanmar", "Cape Verde", "Republic of Congo", "Democratic Republic of the Congo", "Ivory Coast","Czech Republic",
"Diamond Princess", "Swaziland","Guinea Bissau", "Vatican", "South Korea", "Federated States of Micronesia",
"MS Zaandam", "Macedonia", "Republic of Serbia", "Taiwan", "United Republic of Tanzania", "East Timor",
"United States of America", "West Bank and Gaza")#correcting names to match  world dataset
#Remove ships: MS Zaandam and Diamond Princess, and unmatched regions: West Bank and Gaza
df_slice <- df_slice[!df_slice$Country.Region %in% c("MS Zaandam", "Diamond Princess", "West Bank and Gaza"),]
#Adding NA rows for missing countries in world dataset
missingcountry <- world$sovereignt[!world$sovereignt %in% df_slice$Country.Region]
missingrows <- data.frame(t(sapply(missingcountry, FUN = function(i){return(c(df_slice$Date[1], i,NA,NA,NA,NA,NA))})))
colnames(missingrows) <- colnames(df_slice); missingrows[,c(3,4,5,6,7)] <- NA
df_slice <- rbind(df_slice,missingrows)
Confirmed <- tapply(X = df_slice$Confirmed, INDEX = df_slice$Country.Region, FUN = sum)
Deaths <- tapply(X = df_slice$Deaths, INDEX = df_slice$Country.Region, FUN = sum)
Recovered <- tapply(X = df_slice$Recovered, INDEX = df_slice$Country.Region, FUN = sum)
Active <- tapply(X = df_slice$Active, INDEX = df_slice$Country.Region, FUN = sum)
df_slice <- data.frame(Confirmed, Deaths, Recovered, Active, "country" =names(Confirmed), "Date" = as.integer(df_slice$Date[1]))
df_map <- merge(df_slice, world, by.x="country", by.y="sovereignt")
# ggplot(data = df_map) +
#   geom_sf(aes(fill = Confirmed, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", trans = "sqrt")
#   #coord_sf(crs = "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ")
return(df_map)
}
####
world <- ne_countries(scale = "medium", returnclass = "sf")
world <- st_transform(world, crs = 3035)
df_time_world <- read.csv("data/time-series-19-covid-combined.csv")
df_time_world$Active = with(df_time_world, Confirmed - Recovered - Deaths)
df_time_world$Date <- as.integer(factor(df_time_world$Date))
df_time_world$Country.Region <- as.factor (df_time_world$Country.Region )
df_time_world$Province.State <- as.factor(df_time_world$Province.State )
str(df_time_world)
min_day  <- min(unique(df_time_world$Date)); max_day <- max(unique(df_time_world$Date))
date_selected <- round(seq(min_day,max_day, length=200))
df_slice_1 <- df_time_world[df_time_world$Date == date_selected[1],]
out_1 <- map_world(df_slice = df_slice_1, world=world)
for(t in date_selected[-1]){
df_slice_t <- df_time_world[df_time_world$Date == t,]
out_t <- map_world(df_slice = df_slice_t, world=world)
out_1 <- rbind(out_1, out_t)
}
vmin = min(out_1$Active, na.rm = TRUE); vmax = max(out_1$Active, na.rm = TRUE)
#
# p <- ggplot(data = out_1) +
#   geom_sf(aes(fill = Deaths, geometry = geometry)) +
#   scale_fill_viridis_c(option = "rocket", begin = 0, end = 1, limits = c(vmin,vmax), na.value="blue",
#                        trans = scales::pseudo_log_trans(sigma = 0.001, base = 10), breaks = c(0, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000,100000))
p <- ggplot(data = out_1) +
geom_sf(aes(fill = Active, geometry = geometry)) +
scale_fill_viridis_c(option = "inferno", begin = 0, end = 1, limits = c(0,vmax), na.value="blue", direction = -1,
trans = scales::pseudo_log_trans(sigma = 1, base = exp(1)), breaks = 10**c(0,2,4,5,6,7))
o <- p + transition_time(Date) +
labs(title = "Day: {frame_time}")
o_anim <- animate(o, height = 1000, width =1400, fps = 20, duration = 20)
anim_save("Covid_Active_Sphere.gif", o_anim)
o_anim
